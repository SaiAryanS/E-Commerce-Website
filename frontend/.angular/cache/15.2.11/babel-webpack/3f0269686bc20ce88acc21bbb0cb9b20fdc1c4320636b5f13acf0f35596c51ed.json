{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    // A BehaviorSubject holds the current list of cart items.\n    // Components can subscribe to this to get real-time updates.\n    this._cartItems = new BehaviorSubject([]);\n    this.cartItems$ = this._cartItems.asObservable();\n    // An observable for the total number of items in the cart\n    this.itemCount$ = this.cartItems$.pipe(map(items => items.reduce((sum, item) => sum + item.quantity, 0)));\n    // An observable for the total price of all items in the cart\n    this.totalPrice$ = this.cartItems$.pipe(map(items => items.reduce((sum, item) => sum + item.product.price * item.quantity, 0)));\n    // Load cart from localStorage on service initialization\n    const savedCart = localStorage.getItem('cartItems');\n    if (savedCart) {\n      this._cartItems.next(JSON.parse(savedCart));\n    }\n  }\n  // Adds a product to the cart or increments its quantity\n  addToCart(product) {\n    const currentItems = this._cartItems.getValue();\n    const existingItem = currentItems.find(item => item.product.id === product.id);\n    if (existingItem) {\n      existingItem.quantity++;\n    } else {\n      currentItems.push({\n        product: product,\n        quantity: 1\n      });\n    }\n    this.updateCart(currentItems);\n  }\n  // Removes an item completely from the cart\n  removeFromCart(productId) {\n    const currentItems = this._cartItems.getValue();\n    const updatedItems = currentItems.filter(item => item.product.id !== productId);\n    this.updateCart(updatedItems);\n  }\n  // Updates the quantity of a specific item\n  updateQuantity(productId, newQuantity) {\n    if (newQuantity < 1) {\n      this.removeFromCart(productId);\n      return;\n    }\n    const currentItems = this._cartItems.getValue();\n    const itemToUpdate = currentItems.find(item => item.product.id === productId);\n    if (itemToUpdate) {\n      itemToUpdate.quantity = newQuantity;\n    }\n    this.updateCart(currentItems);\n  }\n  // Empties the entire cart\n  clearCart() {\n    this.updateCart([]);\n  }\n  // Helper function to update the BehaviorSubject and save to localStorage\n  updateCart(items) {\n    this._cartItems.next(items);\n    localStorage.setItem('cartItems', JSON.stringify(items));\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,GAAG,QAAoB,MAAM;;AAYvD,OAAM,MAAOC,WAAW;EAgBtBC;IAfA;IACA;IACQ,eAAU,GAAG,IAAIH,eAAe,CAAa,EAAE,CAAC;IACxD,eAAU,GAAG,IAAI,CAACI,UAAU,CAACC,YAAY,EAAE;IAE3C;IACA,eAAU,GAAuB,IAAI,CAACC,UAAU,CAACC,IAAI,CACnDN,GAAG,CAACO,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAClE;IAED;IACA,gBAAW,GAAuB,IAAI,CAACN,UAAU,CAACC,IAAI,CACpDN,GAAG,CAACO,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAIC,IAAI,CAACE,OAAO,CAACC,KAAK,GAAGH,IAAI,CAACC,QAAS,EAAE,CAAC,CAAC,CAAC,CACzF;IAGC;IACA,MAAMG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIF,SAAS,EAAE;MACb,IAAI,CAACX,UAAU,CAACc,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC;;EAE/C;EAEA;EACAM,SAAS,CAACR,OAAgB;IACxB,MAAMS,YAAY,GAAG,IAAI,CAAClB,UAAU,CAACmB,QAAQ,EAAE;IAC/C,MAAMC,YAAY,GAAGF,YAAY,CAACG,IAAI,CAACd,IAAI,IAAIA,IAAI,CAACE,OAAO,CAACa,EAAE,KAAKb,OAAO,CAACa,EAAE,CAAC;IAE9E,IAAIF,YAAY,EAAE;MAChBA,YAAY,CAACZ,QAAQ,EAAE;KACxB,MAAM;MACLU,YAAY,CAACK,IAAI,CAAC;QAAEd,OAAO,EAAEA,OAAO;QAAED,QAAQ,EAAE;MAAC,CAAE,CAAC;;IAEtD,IAAI,CAACgB,UAAU,CAACN,YAAY,CAAC;EAC/B;EAEA;EACAO,cAAc,CAACC,SAAiB;IAC9B,MAAMR,YAAY,GAAG,IAAI,CAAClB,UAAU,CAACmB,QAAQ,EAAE;IAC/C,MAAMQ,YAAY,GAAGT,YAAY,CAACU,MAAM,CAACrB,IAAI,IAAIA,IAAI,CAACE,OAAO,CAACa,EAAE,KAAKI,SAAS,CAAC;IAC/E,IAAI,CAACF,UAAU,CAACG,YAAY,CAAC;EAC/B;EAEA;EACAE,cAAc,CAACH,SAAiB,EAAEI,WAAmB;IACnD,IAAIA,WAAW,GAAG,CAAC,EAAE;MACnB,IAAI,CAACL,cAAc,CAACC,SAAS,CAAC;MAC9B;;IAEF,MAAMR,YAAY,GAAG,IAAI,CAAClB,UAAU,CAACmB,QAAQ,EAAE;IAC/C,MAAMY,YAAY,GAAGb,YAAY,CAACG,IAAI,CAACd,IAAI,IAAIA,IAAI,CAACE,OAAO,CAACa,EAAE,KAAKI,SAAS,CAAC;IAC7E,IAAIK,YAAY,EAAE;MAChBA,YAAY,CAACvB,QAAQ,GAAGsB,WAAW;;IAErC,IAAI,CAACN,UAAU,CAACN,YAAY,CAAC;EAC/B;EAEA;EACAc,SAAS;IACP,IAAI,CAACR,UAAU,CAAC,EAAE,CAAC;EACrB;EAEA;EACQA,UAAU,CAACpB,KAAiB;IAClC,IAAI,CAACJ,UAAU,CAACc,IAAI,CAACV,KAAK,CAAC;IAC3BQ,YAAY,CAACqB,OAAO,CAAC,WAAW,EAAElB,IAAI,CAACmB,SAAS,CAAC9B,KAAK,CAAC,CAAC;EAC1D;;;uBAnEWN,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAqC,SAAXrC,WAAW;MAAAsC,YAFV;IAAM;EAAA","names":["BehaviorSubject","map","CartService","constructor","_cartItems","asObservable","cartItems$","pipe","items","reduce","sum","item","quantity","product","price","savedCart","localStorage","getItem","next","JSON","parse","addToCart","currentItems","getValue","existingItem","find","id","push","updateCart","removeFromCart","productId","updatedItems","filter","updateQuantity","newQuantity","itemToUpdate","clearCart","setItem","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, map, Observable } from 'rxjs';\r\nimport { Product } from './product.service';\r\n\r\n// Defines the structure of an item in the cart\r\nexport interface CartItem {\r\n  product: Product;\r\n  quantity: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  // A BehaviorSubject holds the current list of cart items.\r\n  // Components can subscribe to this to get real-time updates.\r\n  private _cartItems = new BehaviorSubject<CartItem[]>([]);\r\n  cartItems$ = this._cartItems.asObservable();\r\n\r\n  // An observable for the total number of items in the cart\r\n  itemCount$: Observable<number> = this.cartItems$.pipe(\r\n    map(items => items.reduce((sum, item) => sum + item.quantity, 0))\r\n  );\r\n\r\n  // An observable for the total price of all items in the cart\r\n  totalPrice$: Observable<number> = this.cartItems$.pipe(\r\n    map(items => items.reduce((sum, item) => sum + (item.product.price * item.quantity), 0))\r\n  );\r\n\r\n  constructor() {\r\n    // Load cart from localStorage on service initialization\r\n    const savedCart = localStorage.getItem('cartItems');\r\n    if (savedCart) {\r\n      this._cartItems.next(JSON.parse(savedCart));\r\n    }\r\n  }\r\n\r\n  // Adds a product to the cart or increments its quantity\r\n  addToCart(product: Product): void {\r\n    const currentItems = this._cartItems.getValue();\r\n    const existingItem = currentItems.find(item => item.product.id === product.id);\r\n\r\n    if (existingItem) {\r\n      existingItem.quantity++;\r\n    } else {\r\n      currentItems.push({ product: product, quantity: 1 });\r\n    }\r\n    this.updateCart(currentItems);\r\n  }\r\n\r\n  // Removes an item completely from the cart\r\n  removeFromCart(productId: number): void {\r\n    const currentItems = this._cartItems.getValue();\r\n    const updatedItems = currentItems.filter(item => item.product.id !== productId);\r\n    this.updateCart(updatedItems);\r\n  }\r\n\r\n  // Updates the quantity of a specific item\r\n  updateQuantity(productId: number, newQuantity: number): void {\r\n    if (newQuantity < 1) {\r\n      this.removeFromCart(productId);\r\n      return;\r\n    }\r\n    const currentItems = this._cartItems.getValue();\r\n    const itemToUpdate = currentItems.find(item => item.product.id === productId);\r\n    if (itemToUpdate) {\r\n      itemToUpdate.quantity = newQuantity;\r\n    }\r\n    this.updateCart(currentItems);\r\n  }\r\n\r\n  // Empties the entire cart\r\n  clearCart(): void {\r\n    this.updateCart([]);\r\n  }\r\n\r\n  // Helper function to update the BehaviorSubject and save to localStorage\r\n  private updateCart(items: CartItem[]): void {\r\n    this._cartItems.next(items);\r\n    localStorage.setItem('cartItems', JSON.stringify(items));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}